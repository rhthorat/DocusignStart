using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Api;
using DocuSign.eSign.Model;
using DocuSign.eSign.Client;
using System.Text;
using static DocuSign.eSign.Client.Auth.OAuth;
using static DocuSign.eSign.Client.Auth.OAuth.UserInfo;
using System.IO;
using Microsoft.AspNetCore.Http;

namespace DocusignStart.Controllers
{
    /// <summary>
    /// This is a simple ASP.NET Core web application that shows how to use DocuSign 
    ///     to create a simple document workflow.
    /// The application extracts minimal information from the QuickStart application to implement eg002 - SigningWithEmail
    ///     then allows the user to download the signed file when it is ready after signing is complete
    /// </summary>
    public class HomeController : Controller
    {
        protected static ApiClient _apiClient;
        OAuthToken _authToken;
        Account _account;
        string basePath;
        string ClientId;
        string envelopeId;
        string AuthorizationEndpoint;
        string AppUrl;
        string jwt_scopes;
        string awt_scope;
        Session Session;
        DSUser DSUser;
        string ImpersonatedUserId;

        /// <summary>
        /// One good way to populate the values in this application is to download the DocuSign Quickstart
        /// from: https://developers.docusign.com/docs/esign-rest-api/quickstart/
        /// Then populate values from the corresponding variables in QuickStart.
        /// 
        /// Also, delete the private.key file and paste the private.key from the QuickStart
        /// </summary>
        public HomeController()
        {
            ClientId = "";  // Integration key on the DocuSign API dashboard
            ImpersonatedUserId = ""; // ClientId on the DocuSign API dashboard
            basePath = "https://demo.docusign.net" + "/restapi";
            AuthorizationEndpoint = "https://account-d.docusign.com/oauth/auth";
            AppUrl = "https://localhost:44340"; // Project -> Properties -> Debug
            jwt_scopes = "signature impersonation";
            awt_scope = "signature";
        }

        /// <summary>
        /// Get authorization from DocuSign. Docusign will return to redirect_url
        /// </summary>
        /// <returns></returns>
        public IActionResult Index()
        {
            string DocuSignAuthUrl;
            // JWT example
            // redirect uri is the return path for the authorization response
            DocuSignAuthUrl = AuthorizationEndpoint + "?response_type=code" +
                            "&scope=" + jwt_scopes +
                            "&client_id=" + ClientId +
                            "&redirect_uri=" + AppUrl + "/home/senddocumentforsigning?authType=JWT";

            return Redirect(DocuSignAuthUrl);
        }

        /// <summary>
        /// After successful authorization, create a document and send to DocuSign for signing
        /// You will receive the document for signing by email 
        /// Upon signing, use the GetSignedDocument() method to retrieve the signed document
        /// 
        /// The private key file is generated by DocuSign
        /// The key here was copied from the QuickStart example
        /// 
        /// AWT authorization is probably desirable, so each user sends documents in their own name.
        /// JWT authorization sends documents in the name of a common account, which is impersonated
        /// </summary>
        /// <param name="authType">Type of authorization, currently JWT</param>
        /// <returns>View indicating successful transmission of document for signing</returns>
        public IActionResult SendDocumentForSigning(string authType)
        {
            // initialize some basic sender properties
            string SignerEmail = "";                    // Your email at DocuSign dashboard
            string SignerName = "";                     // Your name at DocuSign dashboard
            string AuthServer = "account-d.docusign.com";
            string PrivateKeyFile = "private.key";
            List<string> scopes = new List<string>
                {
                    "signature",
                    "impersonation",
                };

            // Get authorization token from DocuSign
            // Exchange information with DocuSign using RSA keypair generated on DocuSign dashboard
            _apiClient = new ApiClient();
            _authToken = _apiClient.RequestJWTUserToken(
                ClientId, ImpersonatedUserId, AuthServer,
                ReadFileContent(PrepareFullPrivateKeyFilePath(PrivateKeyFile)), 1, scopes);
            _account = GetAccountInfo(_authToken);

            // Organize the received information
            // These two objects align with DocuSign quickstart example. Overkill for this basic example
            DSUser = new DSUser         // User object in DocuSign QuickStart
            {
                Name = _account.AccountName,
                AccessToken = _authToken.access_token,
                ExpireIn = DateTime.Now.AddSeconds(_authToken.expires_in.Value),
                AccountId = _account.AccountId
            };

            Session = new Session
            {
                AccountId = _account.AccountId,
                AccountName = _account.AccountName,
                BasePath = _account.BaseUri
            };

            // Create and send an envelope via email
            // Envelope has a basic html document  created in the document1() method below
            // Other documents, including pdf, are sent similarly
            envelopeId = SendEnvelopeViaEmail(SignerEmail, SignerName, DSUser.AccessToken, basePath, Session.AccountId, "sent");

            // save needed values in session for later status check
            // probably will need to save envelopeId in the database for later use
            HttpContext.Session.SetString("AccessToken", DSUser.AccessToken);
            HttpContext.Session.SetString("AccountId", Session.AccountId);
            HttpContext.Session.SetString("EnvelopeId", envelopeId);

            return View();
        }

        /// <summary>
        /// Once the sent document is signed, this method can download the signed document
        /// </summary>
        /// <returns>Signed file for download</returns>
        public IActionResult GetSignedDocument()
        {
            // retrive necessary identifiers from session
            string accessToken = HttpContext.Session.GetString("AccessToken");
            string accountId = HttpContext.Session.GetString("AccountId");
            string envelopeId = HttpContext.Session.GetString("EnvelopeId");

            // Configure objects to retrieve information from DocuSign
            _apiClient = new ApiClient(basePath);
            _apiClient.Configuration.DefaultHeader.Add("Authorization", "Bearer " + accessToken);
            EnvelopesApi envelopesApi = new EnvelopesApi(_apiClient);

            // get list of documents in envelope
            EnvelopeDocumentsResult DocsList = envelopesApi.ListDocuments(accountId, envelopeId);

            // download a specific document in the envelope
            // We probably want to develop a consistent name format for approval forms and other documents
            string docSelect = DocsList.EnvelopeDocuments[0].DocumentId;
            System.IO.Stream results = envelopesApi.GetDocument(accountId, envelopeId, docSelect);

            return File(results, "application/pdf", "SignedDocument.pdf");
        }

        /// <summary>
        /// Webhook listener
        /// </summary>
        /// <returns></returns>
        public IActionResult Connect()
        {
            return View();
        }

        // Method copied from DocuSign QuickStart Eg002 to create and send a document for signing
        public static string SendEnvelopeViaEmail(string signerEmail, string signerName, string accessToken, string basePath, string accountId, string envStatus)
        {
            EnvelopeDefinition env = MakeEnvelope(signerEmail, signerName, envStatus);
            var apiClient = new ApiClient(basePath);
            apiClient.Configuration.DefaultHeader.Add("Authorization", "Bearer " + accessToken);
            EnvelopesApi envelopesApi = new EnvelopesApi(apiClient);
            EnvelopeSummary results = envelopesApi.CreateEnvelope(accountId, env);
            return results.EnvelopeId;
        }

        /// <summary>
        /// Method copied from DocuSign QuickStart to assist with sending a document for signing.
        /// 
        /// Documents 2 and 3, as well as multiple signers have been deleted to keep things simple
        /// </summary>
        /// <param name="signerEmail"></param>
        /// <param name="signerName"></param>
        /// <param name="envStatus"></param>
        /// <returns></returns>
        private static EnvelopeDefinition MakeEnvelope(string signerEmail, string signerName, string envStatus)
        {
            // document 1 (html) has tag **signature_1**
            // document 2 (docx) has tag /sn1/
            // document 3 (pdf) has tag /sn1/
            //
            // The envelope has one recipient
            // recipient 1 - signer
            // The envelope will be sent first to the signer.

            // create the envelope definition
            EnvelopeDefinition env = new EnvelopeDefinition();
            env.EmailSubject = "Please sign this document";

            // Create document objects, one per document
            Document doc1 = new Document();
            string b64 = Convert.ToBase64String(document1(signerEmail, signerName));
            doc1.DocumentBase64 = b64;
            doc1.Name = "Order acknowledgement"; // can be different from actual file name
            doc1.FileExtension = "html"; // Source data format. Signed docs are always pdf.
            doc1.DocumentId = "1"; // a label used to reference the doc
            env.Documents = new List<Document> { doc1 };

            // create a signer recipient to sign the document, identified by name and email
            // We're setting the parameters via the object creation
            Signer signer1 = new Signer
            {
                Email = signerEmail,
                Name = signerName,
                RecipientId = "1",
                RoutingOrder = "1"
            };

            // Create signHere fields (also known as tabs) on the documents,
            // We're using anchor (autoPlace) positioning
            //
            // The DocuSign platform searches throughout your envelope's
            // documents for matching anchor strings.
            SignHere signHere1 = new SignHere
            {
                AnchorString = "**signature_1**",
                AnchorUnits = "pixels",
                AnchorYOffset = "10",
                AnchorXOffset = "20"
            };

            SignHere signHere2 = new SignHere
            {
                AnchorString = "/sn1/",
                AnchorUnits = "pixels",
                AnchorYOffset = "10",
                AnchorXOffset = "20"
            };

            // Tabs are set per recipient / signer
            Tabs signer1Tabs = new Tabs
            {
                SignHereTabs = new List<SignHere> { signHere1, signHere2 }
            };
            signer1.Tabs = signer1Tabs;

            // Add the recipients to the envelope object
            Recipients recipients = new Recipients
            {
                Signers = new List<Signer> { signer1 },
            };
            env.Recipients = recipients;
            // Request that the envelope be sent by setting |status| to "sent".
            // To request that the envelope be created as a draft, set to "created"
            env.Status = envStatus;

            return env;
        }

        // Method to generate a document for signing
        private static byte[] document1(string signerEmail, string signerName)
        {
            return Encoding.UTF8.GetBytes(
            " <!DOCTYPE html>\n" +
                "    <html>\n" +
                "        <head>\n" +
                "          <meta charset=\"UTF-8\">\n" +
                "        </head>\n" +
                "        <body style=\"font-family:sans-serif;margin-left:2em;\">\n" +
                "        <h1 style=\"font-family: 'Trebuchet MS', Helvetica, sans-serif;\n" +
                "            color: darkblue;margin-bottom: 0;\">World Wide Corp</h1>\n" +
                "        <h2 style=\"font-family: 'Trebuchet MS', Helvetica, sans-serif;\n" +
                "          margin-top: 0px;margin-bottom: 3.5em;font-size: 1em;\n" +
                "          color: darkblue;\">Order Processing Division</h2>\n" +
                "        <h4>Ordered by " + signerName + "</h4>\n" +
                "        <p style=\"margin-top:0em; margin-bottom:0em;\">Email: " + signerEmail + "</p>\n" +
                "        <p style=\"margin-top:3em;\">\n" +
                "  <p>Candy bonbon pastry jujubes lollipop wafer biscuit biscuit. Topping brownie sesame snaps sweet roll pie. Croissant danish biscuit soufflé caramels jujubes jelly. Dragée danish caramels lemon drops dragée. Gummi bears cupcake biscuit tiramisu sugar plum pastry. Dragée gummies applicake pudding liquorice. Donut jujubes oat cake jelly-o. Dessert bear claw chocolate cake gummies lollipop sugar plum ice cream gummies cheesecake.\n" +
                "        </p>\n" +
                "        <!-- Note the anchor tag for the signature field is in white. -->\n" +
                "        <h3 style=\"margin-top:3em;\">Agreed: <span style=\"color:white;\">**signature_1**/</span></h3>\n" +
                "        </body>\n" +
                "    </html>"
                );
        }

        // Method from QuickStart to get user information from DocuSign
        private Account GetAccountInfo(OAuthToken authToken)
        {
            string AuthServer = "account-d.docusign.com";

            _apiClient.SetOAuthBasePath(AuthServer);
            DocuSign.eSign.Client.Auth.OAuth.UserInfo userInfo = _apiClient.GetUserInfo(authToken.access_token);
            Account acct = userInfo.Accounts.FirstOrDefault();
            if (acct == null)
            {
                throw new Exception("The user does not have access to account");
            }

            return acct;
        }

        // Method from QuickStart to return path to private key
        internal static string PrepareFullPrivateKeyFilePath(string fileName)
        {
            const string DefaultRSAPrivateKeyFileName = "docusign_private_key.txt";

            var fileNameOnly = Path.GetFileName(fileName);
            if (string.IsNullOrEmpty(fileNameOnly))
            {
                fileNameOnly = DefaultRSAPrivateKeyFileName;
            }

            var filePath = Path.GetDirectoryName(fileName);
            if (string.IsNullOrEmpty(filePath))
            {
                filePath = Directory.GetCurrentDirectory();
            }

            return Path.Combine(filePath, fileNameOnly);
        }

        // Method from QuickStart to read a file
        // Used to read the private key, which is saved at the root of the project
        internal static byte[] ReadFileContent(string path)
        {
            return System.IO.File.ReadAllBytes(path);
        }
    }

    // Class from QuickStart to organize user information
    // Not needed for this simple example, but retained to maintain parallel with QuickStart
    class DSUser
    {
        public string Name { get; set; }
        public string AccessToken { get; set; }
        public string RefreshToken { get; set; }
        public DateTime? ExpireIn { get; set; }
        public string AccountId { get; set; }
    }

    // Class from QuickStart to organize user information
    // Not needed for this simple example, but retained to maintain parallel with QuickStart
    public class Session
    {
        public string AccountId { get; set; }
        public string AccountName { get; set; }
        public string BasePath { get; set; }
        public string RoomsApiBasePath { get; set; }
    }
}